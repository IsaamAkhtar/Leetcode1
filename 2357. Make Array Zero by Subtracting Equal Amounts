You are given a non-negative integer array nums. In one operation, you must:

Choose a positive integer x such that x is less than or equal to the smallest non-zero element in nums.
Subtract x from every positive element in nums.
Return the minimum number of operations to make every element in nums equal to 0.


Example 1:
Input: nums = [1,5,0,3,5]
Output: 3
Explanation:
In the first operation, choose x = 1. Now, nums = [0,4,0,2,4].
In the second operation, choose x = 2. Now, nums = [0,2,0,0,2].
In the third operation, choose x = 2. Now, nums = [0,0,0,0,0].

Example 2:
Input: nums = [0]
Output: 0
Explanation: Each element in nums is already 0 so no operations are needed.

class Solution(object):
    def minimumOperations(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        count = 0
        #We loop until we break out, which means the minimum has been reassigned.
        while True:
            firstMin = float('inf')
            #Loop through the array, if we find a nonzero value where it is less then the 
            #minimum, we reassign the value of the minimum.
            for i in range(len(nums)):
                if nums[i] != 0 and nums[i] < firstMin:
                    firstMin = nums[i]
            if firstMin == float('inf'):
                break
            #Loop again, this time subtracting the minimum value from each index, and
            #increment the count.
            for i in range(len(nums)):
                if nums[i] != 0:
                    nums[i] -= firstMin
            count += 1
        return count
