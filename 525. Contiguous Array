Given a binary array nums, return the maximum length of a contiguous subarray with an equal number of 0 and 1.


Example 1:
Input: nums = [0,1]
Output: 2
Explanation: [0, 1] is the longest contiguous subarray with an equal number of 0 and 1.

Example 2:
Input: nums = [0,1,0]
Output: 2
Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.

class Solution:
    def findMaxLength(self, nums: List[int]) -> int:
        maxLength = 0
        count = 0
        myDict = {0: -1}
        #Loop through the array, decrement our counter for each 0, and increment it for each
        #one.
        for i in range(len(nums)):
            if nums[i] == 0:
                count -= 1
            else:
                count += 1
            #Check if the current count exists in the dictionary. If it does, update the
            #maximum length as the current max and difference between the current index 
            #and the index at the count in the dictionary.
            if count in myDict:
                maxLength = max(maxLength, i - myDict[count])
            else:
                #If it does not already exist, add it to the dictionary with the current value.
                myDict[count] = i
        return maxLength
        
