Given an integer n, return the number of prime numbers that are strictly less than n.

 

Example 1:
Input: n = 10
Output: 4
Explanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.

Example 2:
Input: n = 0
Output: 0

Example 3:
Input: n = 1
Output: 0

class Solution:
    def countPrimes(self, n: int) -> int:
        #No primes exist in this range.
        if n <= 2:
            return 0
        #Initialise a array to count the primes, assume all are primes to start.
        isPrime = [True] * n
        #0 and 1 are not prime.
        isPrime[0] = isPrime[1] = False
        #Loop from the second index to the square root of n, if a prime is found, loop from
        #from the square of the index through n, and the inner loops index is not prime. 
        #return the number of primes.
        for i in range(2, int(n**0.5) + 1):
            if isPrime[i]:
                for j in range(i * i, n, i):
                    isPrime[j] = False
        return sum(isPrime)
