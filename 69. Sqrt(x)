Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well.

You must not use any built-in exponent function or operator.

For example, do not use pow(x, 0.5) in c++ or x ** 0.5 in python.


Example 1:
Input: x = 4
Output: 2
Explanation: The square root of 4 is 2, so we return 2.

Example 2:
Input: x = 8
Output: 2
Explanation: The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.

class Solution(object):
    def mySqrt(self, x):
        """
        :type x: int
        :rtype: int
        """
        #We know that the root of 1 or 0 is itself.
        if x == 0 or x == 1:
            return x
        #We initialize left and right pointers.
        left, right = 1, x // 2
        #We search until the left exceeds the right.
        while left <= right:
            #Calculate the middle, then the square.
            mid = (left + right) // 2
            square = mid * mid
            #We now check to see if we have found the square, if not we update the pointers.
            if square == x:
                return mid
            elif square < x:
                left = mid + 1
            else:
                right = mid - 1
        return right
