Given an integer array nums that does not contain any zeros, find the largest positive integer k such that -k also exists in the array.

Return the positive integer k. If there is no such integer, return -1.

 

Example 1:
Input: nums = [-1,2,-3,3]
Output: 3
Explanation: 3 is the only valid k we can find in the array.

Example 2:
Input: nums = [-1,10,6,7,-7,1]
Output: 7
Explanation: Both 1 and 7 have their corresponding negative values in the array. 7 has a larger value.

Example 3:
Input: nums = [-10,8,6,7,-2,-3]
Output: -1
Explanation: There is no a single valid k, we return -1.

class Solution(object):
    def findMaxK(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        #Make a list of the positive numbers, make a set of that list, and initialise a 
        #list for all of the positives that have their negatives.
        posNums = [num for num in nums if num >= 1]
        mySet = set(posNums)
        hasNegative = []
        #Loop through the set, get the negative of each of the positives, check if the negative
        #exists in nums, if it does, add it to the list of negatives. Return the max value
        #of that list.
        for num in mySet:
            negative = -1 * num
            if negative in nums:
                hasNegative.append(num)
        if len(hasNegative) >= 1:
            return max(hasNegative)
        return -1
