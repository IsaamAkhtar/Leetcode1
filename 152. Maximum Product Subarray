Given an integer array nums, find a 
subarray
 that has the largest product, and return the product.

The test cases are generated so that the answer will fit in a 32-bit integer.

 

Example 1:
Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.

Example 2:
Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.

class Solution:
    def maxProduct(self, nums: List[int]) -> int:
        #We return zero if the array is empty.
        if not nums:
            return 0
        #Create variables for the max and min product, as well as the answer.
        maxProduct = nums[0]
        minProduct = nums[0]
        result = nums[0]
        #Loop through the array, and swap the max and min if the current is negative.
        for i in range(1, len(nums)):
            if nums[i] < 0:
                maxProduct, minProduct = minProduct, maxProduct
            #Update max and min products ending at the current position.
            maxProduct = max(nums[i], maxProduct * nums[i])
            minProduct = min(nums[i], minProduct * nums[i])
            #Update the result with the maximum product.
            result = max(result, maxProduct)
        return result
