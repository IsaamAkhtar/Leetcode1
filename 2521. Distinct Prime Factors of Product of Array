Given an array of positive integers nums, return the number of distinct prime factors in the product of the elements of nums.

Note that:

A number greater than 1 is called prime if it is divisible by only 1 and itself.
An integer val1 is a factor of another integer val2 if val2 / val1 is an integer.

Example 1:
Input: nums = [2,4,3,7,10,6]
Output: 4
Explanation:
The product of all the elements in nums is: 2 * 4 * 3 * 7 * 10 * 6 = 10080 = 25 * 32 * 5 * 7.
There are 4 distinct prime factors so we return 4.

Example 2:
Input: nums = [2,4,8,16]
Output: 1
Explanation:
The product of all the elements in nums is: 2 * 4 * 8 * 16 = 1024 = 210.
There is 1 distinct prime factor so we return 1.

class Solution(object):
    def distinctPrimeFactors(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        #Helper function to find the prime factors of the product of nums.
        def findPrimeFactors(number):
            #Make a set to store the factors.
            factors = set()
            #We will start by setting our divisor to be 2.
            divisor = 2
            #Loop through while the square of our divisor is less then or equal to the number.
            while divisor * divisor <= number:
                #If we have a prime factor, add it to the list of factors, and increment
                #the divisor.
                while number % divisor == 0:
                    factors.add(divisor)
                    number //= divisor
                divisor += 1
            if number > 1:
                factors.add(number)
            return factors
        distinctPrimeFactors = set()
        #Loop through the array, update with each prime factor, and return the length
        #of the set of all the prime factors.
        for num in nums:
            primeFactors = findPrimeFactors(num)
            distinctPrimeFactors.update(primeFactors)
        return len(distinctPrimeFactors)
            
