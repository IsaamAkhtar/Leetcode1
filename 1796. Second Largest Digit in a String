Given an alphanumeric string s, return the second largest numerical digit that appears in s, or -1 if it does not exist.

An alphanumeric string is a string consisting of lowercase English letters and digits.

 

Example 1:
Input: s = "dfa12321afd"
Output: 2
Explanation: The digits that appear in s are [1, 2, 3]. The second largest digit is 2.

Example 2:
Input: s = "abc1111"
Output: -1
Explanation: The digits that appear in s are [1]. There is no second largest digit. 

class Solution(object):
    def secondHighest(self, s):
        """
        :type s: str
        :rtype: int
        """
        #Create variables for our largest and second largest digits.
        largest = -1
        secondLargest = -1
        #Iterate through the string.
        for char in s:
            #We check to find the digits.
            if char.isdigit():
                digit = int(char)
                #If a digit is found and is larger then the current largest, we reassign
                #the second largest to the original largest, and set the new largest to be
                #the digit.
                if digit > largest:
                     secondLargest = largest
                     largest = digit
                #If we find that the digit is not the largest but is greater then the
                #current second largest, we change the value of the second largest.
                elif digit != largest and digit > secondLargest:
                    secondLargest = digit
        return secondLargest
