Given an integer array nums, return the most frequent even element.

If there is a tie, return the smallest one. If there is no such element, return -1.

 

Example 1:
Input: nums = [0,1,2,2,4,4,1]
Output: 2
Explanation:
The even elements are 0, 2, and 4. Of these, 2 and 4 appear the most.
We return the smallest one, which is 2.

Example 2:
Input: nums = [4,4,4,9,2,4]
Output: 4
Explanation: 4 is the even element appears the most.

Example 3:
Input: nums = [29,47,21,41,13,37,25,7]
Output: -1
Explanation: There is no even element.

class Solution(object):
    def mostFrequentEven(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        #Initialise a list for the even numbers, and the most frequent even number.
        evenList = []
        mostFrequent = 0
        #Fill the list of the even numbers.
        for num in nums:
            if num % 2 == 0:
                evenList.append(num)
        #Check if there are any even numbers, if so, then get how many there are of each.
        #If the count is greater then or equal to the current most frequent, we reassign it.
        if len(evenList) > 0:
            for evenNum in evenNist:
                count = evenList.count(evenNum)
                if count > even_list.count(mostFrequent) or (count == evenList.count          (mostFrequent) and evenNum < mostFrequent):
                    mostFrequent = evenNum
            return mostFrequent

        return -1

                
        
