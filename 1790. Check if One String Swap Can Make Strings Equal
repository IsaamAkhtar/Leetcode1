You are given two strings s1 and s2 of equal length. A string swap is an operation where you choose two indices in a string (not necessarily different) and swap the characters at these indices.

Return true if it is possible to make both strings equal by performing at most one string swap on exactly one of the strings. Otherwise, return false.

 
Example 1:
Input: s1 = "bank", s2 = "kanb"
Output: true
Explanation: For example, swap the first character with the last character of s2 to make "bank".

Example 2:
Input: s1 = "attack", s2 = "defend"
Output: false
Explanation: It is impossible to make them equal with one string swap.

Example 3:
Input: s1 = "kelb", s2 = "kelb"
Output: true
Explanation: The two strings are already equal, so no string swap operation is required.

class Solution(object):
    def areAlmostEqual(self, s1, s2):
        """
        :type s1: str
        :type s2: str
        :rtype: bool
        """
        #If the two strings are equal, we know our condition is true.
        if s1 == s2:
            return True
        #Initialize variables for the number of differences, and a list to store where the
        #differences are.
        diff_count = 0
        diff_indices = []
        #Loop through one of the strings.
        for i in range(len(s1)):
            #We find all of the differences, increment the count as needed, and store the
            #indices.
            if s1[i] != s2[i]:
                diff_count += 1
                diff_indices.append(i)
            #If there are more then two differences, we cannot make them equal.
            if diff_count > 2:
                return False
        #Return when we have exactly two differences, and the differences are such that they 
        #can be swapped.
        return diff_count == 2 and s1[diff_indices[0]] == s2[diff_indices[1]] and s1[diff_indices[1]] == s2[diff_indices[0]]
