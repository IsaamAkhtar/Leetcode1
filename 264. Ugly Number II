An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.

Given an integer n, return the nth ugly number.

 

Example 1:
Input: n = 10
Output: 12
Explanation: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers.

Example 2:
Input: n = 1
Output: 1
Explanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.

class Solution:
    def nthUglyNumber(self, n: int) -> int:
        #Initialize the list with the first ugly number, which is 1
        ugly = [1]  
        #Pointers for 2, 3, and 5
        p2, p3, p5 = 0, 0, 0 
        #Calculate the next ugly number by finding the minimum of the next numbers
        #from each prime number
        while len(ugly) < n:
            nextUgly = min(ugly[p2] * 2, ugly[p3] * 3, ugly[p5] * 5)
            #Move the pointers for the prime factors as needed
            if nextUgly == ugly[p2] * 2:
                p2 += 1
            if nextUgly == ugly[p3] * 3:
                p3 += 1
            if nextUgly == ugly[p5] * 5:
                p5 += 1
            ugly.append(nextUgly)
        return ugly[-1]
