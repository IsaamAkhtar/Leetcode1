A sentence is a list of words that are separated by a single space with no leading or trailing spaces. Each word consists of lowercase and uppercase English letters.

A sentence can be shuffled by appending the 1-indexed word position to each word then rearranging the words in the sentence.

For example, the sentence "This is a sentence" can be shuffled as "sentence4 a3 is2 This1" or "is2 sentence4 This1 a3".
Given a shuffled sentence s containing no more than 9 words, reconstruct and return the original sentence.


Example 1:
Input: s = "is2 sentence4 This1 a3"
Output: "This is a sentence"
Explanation: Sort the words in s to their original positions "This1 is2 a3 sentence4", then remove the numbers.

Example 2:
Input: s = "Myself2 Me1 I4 and3"
Output: "Me Myself and I"
Explanation: Sort the words in s to their original positions "Me1 Myself2 and3 I4", then remove the numbers.

class Solution(object):
    def sortSentence(self, s):
        """
        :type s: str
        :rtype: str
        """
        #Make a list of the words in the sentence, and a dictionary to store the pairs 
        #of the words and its numbers.
        words = s.split()
        wordDict = {}
        #Loop through the words, set its postion as the number at the end, and fix it in
        #the dictionary.
        for word in words:
            position = int(word[-1])
            wordDict[position] = word[:-1]
        #Sort the words based on their position.
        sortedWords = [wordDict[position] for position in sorted(wordDict.keys())]
        #Make a sentence with the words.
        reconstructedSentence = ' '.join(sortedWords)
        return reconstructedSentence
