Given an integer array nums that may contain duplicates, return all possible 
subsets
 (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

Example 1:
Input: nums = [1,2,2]
Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]

Example 2:
Input: nums = [0]
Output: [[],[0]]

class Solution(object):
    def subsetsWithDup(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        #Sort the given array.
        nums.sort()
        #Use a set to store unique subsets.
        result = set()
        n = len(nums)
        #Loop through the length of the array.
        for r in range(n + 1):
            #For each subset of nums, add it to the answer.
            for subset in itertools.combinations(nums, r):
                result.add(subset)
        #Return a list of all of the subsets.
        return [list(subset) for subset in result]
