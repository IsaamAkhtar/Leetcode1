Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:
Input: nums = [1,3,5,6], target = 5
Output: 2

Example 2:
Input: nums = [1,3,5,6], target = 2
Output: 1

Example 3:
Input: nums = [1,3,5,6], target = 7
Output: 4

class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        #Initialize the left and right pointers.
        left, right = 0, len(nums) - 1
        #We will loop the binary search until our left pointer is less then or equal
        #to the right.
        while left <= right:
            #Calculate the middle index.
            mid = left + (right - left) // 2
            #Check the middle index.
            if nums[mid] == target:
                return mid
            #Target is in the right half or left half.
            elif nums[mid] < target:
                left = mid + 1
            else:
                right = mid - 1
        #Incase the target is not in the array.
        return left
