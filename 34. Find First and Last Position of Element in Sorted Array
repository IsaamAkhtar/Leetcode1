Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

Example 2:
Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]

Example 3:
Input: nums = [], target = 0
Output: [-1,-1]

import bisect
class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
         #We first locate the first index that target exists on, then the location that 
         #the target should inserted in to match the sorted order.
         start = bisect.bisect_left(nums,target)      
         end = bisect.bisect_right(nums,target)
         #If this condition is met, the target cannot exist in the array.
         if start > end-1:
            return [-1, -1]
         #We return the start and end positions.
         return [start, end-1]
