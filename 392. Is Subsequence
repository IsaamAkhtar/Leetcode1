Given two strings s and t, return true if s is a subsequence of t, or false otherwise.

A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., "ace" is a subsequence of "abcde" while "aec" is not).

 

Example 1:
Input: s = "abc", t = "ahbgdc"
Output: true

Example 2:
Input: s = "axc", t = "ahbgdc"
Output: false

class Solution(object):
    def isSubsequence(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: bool
        """
        #Initialise pointer.
        i, j = 0, 0
        #While loop to run while the pointers are less the length of the words.
        while i < len(s) and j < len(t):
            #Check if the characters are the same.
            if s[i] == t[j]:
                #Increment the pointers.
                i += 1
            j += 1

        return i == len(s)

 

