Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.


class Solution(object):
    def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        """
        """

        """
        #Creating our stack
        stack = []
        #Iterating through our string
        for i in s:
            #If we see a opening to a set of parentheses, append it to our stack
            if i == '(' or i == '{' or i == '[':
                stack.append(i)
            #We check to make sure our stack has at least one item
            elif(len(stack) != 0):
                #Let element be our topmost item from stack
                element = stack.pop()
                #Checking to make sure there are no invalid sets of parentheses
                if element == '(' and i != ')':
                    return False
                if element == '{' and i != '}':
                    return False
                if element == '[' and i != ']':
                    return False
            else:
                return False
        #If there is anything remaining in the stack at this point, it is not possible for it 
        #to make a valid set of parentheses
        if(len(stack) != 0):
            return False
        else:
            return True
